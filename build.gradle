buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'

    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
    }
}


// 플러그인 지정
plugins {
    id 'com.palantir.docker' version '0.25.0'
}

allprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.2'
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'org.iptime.glegend'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // gralde 버전 지정
    task wrapper(type: Wrapper) {
        gradleVersion = "6.0"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://www.datanucleus.org/downloads/maven2" }

    }

    test {
        useJUnitPlatform {
//			includeTags "fast", "smoke & feature-a" //@Tag("대응")
            includeEngines "junit-jupiter"
        }
        reports.html.enabled = false
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
    check.dependsOn jacocoTestReport

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }
    }

    dependencies {
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test

    getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
    getExecutionData().setFrom(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        getExecutionData().setFrom(files(executionData.findAll {
            it.exists()
        }))
    }
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: "logback-classic"
    }
}




